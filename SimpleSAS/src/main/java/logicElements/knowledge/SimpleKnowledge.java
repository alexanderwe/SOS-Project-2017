package logicElements.knowledge;

import java.util.HashMap;

import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IKnowledgeLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeNotFoundException;

/**
 * Description from meta data:
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS
 *
 */
public class SimpleKnowledge extends AbstractLogic implements IKnowledgeLogic {

	private volatile HashMap<String, IKnowledgeRecord> knowledgeBase = new HashMap<String, IKnowledgeRecord>();
	private boolean debugKnowledge = false;

	public SimpleKnowledge() {
		super();
		supportedInformationTypes.add(InformationType.Knowledge_SIMPLESAS);

		this.informationType = InformationType.Knowledge_SIMPLESAS;
		type = LogicType.KNOWLEDGE;
		shortName = "SimpleKnowledge";
	}

	@Override
	public IKnowledgeRecord getKnowledge(String id) throws KnowledgeNotFoundException {
		if (this.knowledgeBase.containsKey(id)) {
			if (this.debugKnowledge) {
				System.out.println("Knowledge found : " + id);
			}
			return (IKnowledgeRecord) this.knowledgeBase.get(id);
		}
		if (this.debugKnowledge) {
			System.out.println("Knowledge not found : " + id);
		}
		throw new KnowledgeNotFoundException(id);
	}

	@Override
	public String saveKnowledge(IKnowledgeRecord knowledge, String id) {
		if (this.debugKnowledge) {
			System.out.println("Knowledge received for saving : " + knowledge.toString());
		}
		this.knowledgeBase.put(id, knowledge);
		return "Knowledge saved : " + id;
	}

	@Override
	public String callLogic(IKnowledgeRecord data) {
		return null;
	}

}
