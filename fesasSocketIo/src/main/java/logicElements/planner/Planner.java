package logicElements.planner;

import java.util.HashMap;

import com.google.gson.JsonObject;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IPlannerLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import logicElements.knowledge.Action;
import logicElements.knowledge.ActionType;

/**
 * Description from meta data: 
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS 
 *
 */
public class Planner extends AbstractLogic implements IPlannerLogic {
	
	public Planner() {
		super();	
		supportedInformationTypes.add(InformationType.Analyzing_DEFAULT);
	
		this.informationType = InformationType.Planning_DEFAULT;
		type = LogicType.PLANNER;
		shortName = "Planner";
	}

	// do not change anything above this line (except of adding import statements)

	//add variables here
	
	@Override
	public void initializeLogic(HashMap<String, String> properties) {
		//use this method for initializing variables, etc.
		// if there is nothing to do, delete it
	}
	
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) {
			if (data.getData() instanceof JsonObject) {

				JsonObject analyzeResult = (JsonObject) data.getData();
				String resourceId = analyzeResult.get("resourceId").getAsString();
				String reason = analyzeResult.get("reason").getAsString();
				ActionType actionType = ActionType.valueOf(analyzeResult.get("action").getAsString());

				System.out.println(actionType);
				switch (actionType) {
					case LIGHT_TURN_ON: this.sendData(new Action(resourceId, ActionType.LIGHT_TURN_ON, reason));break;
					case LIGHT_TURN_OFF: this.sendData(new Action(resourceId, ActionType.LIGHT_TURN_OFF, reason));break;
					case WINDOW_CLOSE: this.sendData(new Action(resourceId, ActionType.WINDOW_CLOSE, reason));break;
					case WINDOW_OPEN: this.sendData(new Action(resourceId, ActionType.WINDOW_OPEN, reason));break;
					case TURN_OFF_ALL: this.sendData(new Action(resourceId, ActionType.TURN_OFF_ALL, reason));break;
					case DO_NOTHING: this.sendData(new Action(resourceId, ActionType.DO_NOTHING, reason));break;
					default: break;
				}
			}
			return "Not the expected data type! It is: " + data.getData().getClass().getSimpleName();
		}
		return "Not a KnowledgeRecord! It is: " + data.getClass().getSimpleName();
	}
	
	// add further methods if needed

}
