package logicElements.monitor;

import java.util.HashMap;

import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IMonitorLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import dependencies.Context;
import dependencies.ContextException;

/**
 * Description from meta data: 
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS 
 *
 */
public class Monitor extends AbstractLogic implements IMonitorLogic {
	
	public Monitor() {
		super();	
		supportedInformationTypes.add(InformationType.Sensor_DEFAULT);
	
		this.informationType = InformationType.Monitoring_DEFAULT;
		type = LogicType.MONITOR;
		shortName = "Monitor";
	}

	// do not change anything above this line (except of adding import statements)

	//add variables here
	
	@Override
	public void initializeLogic(HashMap<String, String> properties) {
		//use this method for initializing variables, etc.
		// if there is nothing to do, delete it
	}
	
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) { //substitute Object with the expected data type
			if (data.getData() instanceof String) { //substitute OBJECT with the expected data type
				//data.getData() return the actual data. The other properties of data is metadata (e.g., time stamps).
				// use 
				// this.sendData(Object); //for sending an object
				// or
				// this.sendArrayList(List); // for a list
				// return sth. as status message (displayed by the AL

				/*
				Context context = new Context();
				
				String completeSensorData = (String)data.getData();
				
				String[] sensors = completeSensorData.split(",");
				
				for(String sensorData: sensors){
					System.out.println(sensorData);*/
					/*String[] split = sensorData.split(":");
					String sensorName = split[0];
					String sensorValue = split[1];
					
					final String objectId = "AndroidPhone";
					try{
						if(sensorName.equals("android.sensor.gyroscope")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_STRING);
						}else if(sensorName.equals("android.sensor.accelerometer")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_STRING);
						}else if(sensorName.equals("android.sensor.proximity")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_DOUBLE);
						}else if(sensorName.equals("Location")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_STRING);
						}else if(sensorName.equals("android.sensor.pressure")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_DOUBLE);
						}else if(sensorName.equals("android.sensor.magnetic_field")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_STRING);
						}else if(sensorName.equals("android.sensor.light")){
							context.putEntry(objectId, sensorName, sensorValue, Context.UNIT_NONE, Context.TYPE_DOUBLE);
						}
					} catch (ContextException e) {
						e.printStackTrace();
					}*/

			}

			this.sendData("");

		}
		return "";
	}

	
	// add further methods if needed

}
