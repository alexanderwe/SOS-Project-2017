package logicElements.analyzer;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IAnalyzerLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import dependencies.PropertiesUtil;
import dependencies.RulesUtil;
import jdk.nashorn.api.scripting.JSObject;
import logicElements.knowledge.ActionType;
import logicElements.knowledge.ContextWrapper;
import logicElements.knowledge.SensorType;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.util.HashMap;
import java.util.Map;

/**
 * Description from meta data:
 * <p>
 * This file has been generated by the FESAS development tool set.
 *
 * @author FESAS
 */
public class Analyzer extends AbstractLogic implements IAnalyzerLogic {

    final static Logger logger = LogManager.getLogger(Analyzer.class);

    public Analyzer() {
        super();
        supportedInformationTypes.add(InformationType.Monitoring_DEFAULT);

        this.informationType = InformationType.Analyzing_DEFAULT;
        type = LogicType.ANALYZER;
        shortName = "Analyzer";
    }

    // do not change anything above this line (except of adding import statements)

    //add variables here
    ScriptEngine engine;
    Map props;
    JsonObject rules;


    @Override
    public void initializeLogic(HashMap<String, String> properties) {
        try {
            engine = new ScriptEngineManager().getEngineByName("ECMAScript");
            props = PropertiesUtil.loadFromClasspath("application.properties");
            rules = RulesUtil.loadFromClasspath("rules.json");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Analyzes the data based on the properties defined in resources/rules.json
     *
     * @param data
     * @return
     */
    @Override
    public String callLogic(IKnowledgeRecord data) {
        if (data instanceof KnowledgeRecord) {
            if (data.getData() instanceof JsonObject) {

                try {
                    System.out.println("In Analyzer");
                    //Extract mandatory data of the JsonObject
                    JsonObject sensor = (JsonObject) data.getData();
                    String resourceId = sensor.get("resourceId").getAsString();
                    SensorType sensorType = SensorType.byValue(sensor.get("sensorType").getAsString());
                    JsonObject sensorData = sensor.getAsJsonObject("data");


                    // Is used for checking if the system can execute any given action
                    boolean conditionSatisfied = false;

                    int dayEnd = Integer.parseInt((String) props.get("day.end"));

                    int personCount = 0; // If no person is recognized yet the personCount will be 0
                    boolean windowClosed = true;
                    boolean lightOn = false;


                    try {
                        personCount = ContextWrapper.getInstance().getContext().get(resourceId).get("SENSOR_TYPE_PERSON").get(0).get("value").getAsInt();
                    } catch (Exception e) {
                        logger.error("Person count not initialized");
                    }

                    try {
                        windowClosed = ContextWrapper.getInstance().getContext().get(resourceId).get("SENSOR_TYPE_WINDOW").get(0).get("closed").getAsBoolean();
                    } catch (Exception e) {
                        logger.error("Window closed not initialized");
                    }

                    try {
                        lightOn = ContextWrapper.getInstance().getContext().get(resourceId).get("SENSOR_TYPE_LIGHT_BULB").get(0).get("on").getAsBoolean();
                    } catch (Exception e) {
                        logger.error("Light on not initialized");
                    }


                    logger.info("Person count: " + personCount);
                    logger.info("Window closed: " + windowClosed);
                    logger.info("Light on: " + lightOn);

                    for (JsonElement condition : rules.getAsJsonObject(sensorType.toString()).getAsJsonArray("conditions")) {

                        // Keys of the current condition object of the loop
                        JsonObject currentCondition = condition.getAsJsonObject();
                        String name = currentCondition.get("name").getAsString();
                        String eval = currentCondition.get("eval").getAsString(); // JS Function
                        String conditionFunc = currentCondition.get("condition").getAsString(); // JS Function
                        String action = currentCondition.get("action").getAsString();


                        switch (sensorType) {
                            case SENSOR_TYPE_LIGHT: {
                                boolean actionAllowed = (boolean) ((JSObject) engine.eval(conditionFunc)).call(null, dayEnd, personCount, lightOn);

                                if ((boolean) ((JSObject) engine.eval(eval)).call(null, sensorData.get("value").getAsInt(), actionAllowed)) {
                                    this.sendData(new JsonParser().parse("{resourceId: " + resourceId + ", action: " + ActionType.byValue(action) + ", reason: " + name + "}").getAsJsonObject());
                                    conditionSatisfied = true;
                                    break; // if we have found the first rule that is satisfied we can stop

                                }
                                break;
                            }
                            case SENSOR_TYPE_HUMIDITY: {
                                boolean actionAllowed = (boolean) ((JSObject) engine.eval(conditionFunc)).call(null, dayEnd, personCount, windowClosed);

                                if ((boolean) ((JSObject) engine.eval(eval)).call(null, sensorData.get("value").getAsInt(), actionAllowed)) {
                                    this.sendData(new JsonParser().parse("{resourceId: " + resourceId + ", action: " + ActionType.byValue(action) + ", reason: " + name + "}").getAsJsonObject());
                                    conditionSatisfied = true;
                                    break; // if we have found the first rule that is satisfied we can stop
                                }
                                break;
                            }
                            case SENSOR_TYPE_PERSON: {
                                boolean actionAllowed = (boolean) ((JSObject) engine.eval(conditionFunc)).call(null);

                                if ((boolean) ((JSObject) engine.eval(eval)).call(null, sensorData.get("value").getAsInt(), actionAllowed)) {
                                    this.sendData(new JsonParser().parse("{resourceId: " + resourceId + ", action: " + ActionType.byValue(action) + ", reason: " + name + "}").getAsJsonObject());
                                    conditionSatisfied = true;
                                    break; // if we have found the first rule that is satisfied we can stop
                                }
                                break;
                            }
                            default:
                                break;
                        }


                    }
                    // We did not found any condition that was met
                    if (!conditionSatisfied) {
                        this.sendData(new JsonParser().parse("{resourceId: " + resourceId + ", action: " + ActionType.DO_NOTHING + ", reason: '" + new String("Did not found a condition that was satisfied") + "'}").getAsJsonObject());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return "Not the expected data type! It is: " + data.getData().getClass().getSimpleName();
        }
        return "Not a KnowledgeRecord! It is: " + data.getClass().getSimpleName();
    }

    // add further methods if needed


}
