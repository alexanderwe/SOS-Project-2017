package logicElements.sensor;

import java.util.Date;
import java.util.HashMap;

import com.corundumstudio.socketio.AckRequest;
import com.corundumstudio.socketio.SocketIOClient;
import com.corundumstudio.socketio.SocketIOServer;
import com.corundumstudio.socketio.listener.DataListener;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.ISensorLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationCategory;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import dependencies.SocketManager;

/**
 * Description from meta data: 
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS 
 *
 */
public class SocketIoSensor extends AbstractLogic implements ISensorLogic {
	
	public SocketIoSensor() {
		super();	
		supportedInformationTypes.add(InformationType.Probe_SIMPLE_MANAGED_RESOURCES);
	
		this.informationType = InformationType.Sensor_DEFAULT;
		type = LogicType.SENSOR;
		shortName = "SocketIoSensor";
	}

	// do not change anything above this line (except of adding import statements)

	//add variables here
	private SocketIOServer server;
	
	@Override
	public void initializeLogic(HashMap<String, String> properties) {

		// Set up the socket io sever for communication with the client
		server = SocketManager.getInstance().getServer();
		setupSocket();
	}
	
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) { //substitute Object with the expected data type
			if (data.getData() instanceof String) { //substitute OBJECT with the expected data type
				//data.getData() return the actual data. The other properties of data is metadata (e.g., time stamps).
				// use 
				// this.sendData(Object); //for sending an object
				// or
				// this.sendArrayList(List); // for a list
				// return sth. as status message (displayed by the AL
				JsonObject jsonObject = new JsonParser().parse((String) data.getData()).getAsJsonObject();
				this.sendData(data.getData());
			}
			return "Not the expected data type! It is: " + data.getData().getClass().getSimpleName();
		}
		return "Not a KnowledgeRecord! It is: " + data.getClass().getSimpleName();
	}
	
	private void setupSocket(){
		final SocketIoSensor sensorInstance = this;
        server.addEventListener("sensorData", String.class, (client, data, ackRequest) -> {
            KnowledgeRecord record = new KnowledgeRecord(data, InformationType.Probe_SIMPLE_MANAGED_RESOURCES.toString(), InformationCategory.SENSOR.toString(), "fesasID-000_1_007", new Date().getTime());
            sensorInstance.callLogic(record);
        });
        
        System.out.println("Server will start");
        server.start();

        try {
			Thread.sleep(120000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        System.out.println("Server will shutdown");
        server.stop();
	}
	
	// add further methods if needed

}
